name: Terraform CI

on: [push]
jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init
       
    - name: Terraform Validate
      run: terraform validate
   
    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve
      
    - name: Set S3_ECR_REPOSITORY
      run: echo "S3_ECR_REPOSITORY=ramya-coaching18-infra-ecr-s3" >> $GITHUB_ENV
  
    - name: Set SQS_ECR_REPOSITORY
      run: echo "SQS_ECR_REPOSITORY=ramya-coaching18-infra-ecr-sqs" >> $GITHUB_ENV
  
    - name: Set S3_CONTAINER_NAME
      run: echo "S3_CONTAINER_NAME=ramya-coaching18-infra-container-s3" >> $GITHUB_ENV
  
    - name: Set SQS_CONTAINER_NAME
      run: echo "SQS_CONTAINER_NAME=ramya-coaching18-infra-container-sqs" >> $GITHUB_ENV
  
    - name: Set S3_ECS_SERVICE
      run: echo "S3_ECS_SERVICE=ramya-coaching18-infra-service-s3" >> $GITHUB_ENV
  
    - name: Set SQS_ECS_SERVICE
      run: echo "SQS_ECS_SERVICE=ramya-coaching18-infra-service-sqs" >> $GITHUB_ENV

    - name: Set S3_TASK_DEF
      run: echo "S3_TASK_DEF=ramya-coaching18-infra-task-s3" >> $GITHUB_ENV
 
    - name: Set SQS_TASK_DEF
      run: echo "SQS_TASK_DEF=ramya-coaching18-infra-task-sqs" >> $GITHUB_ENV
  
    - name: Set ECS_CLUSTER
      run: echo "ECS_CLUSTER=ramya-coaching18-infra-ecs" >> $GITHUB_ENV

    - name: Set AWS_REGION
      run: echo "AWS_REGION=ap-southeast-1" >> $GITHUB_ENV

 
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push S3 Docker image to Amazon ECR
      id: build-s3-image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.S3_ECR_REPOSITORY }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.S3_ECR_REPOSITORY }}:latest
        platforms: linux/amd64

    - name: Build and push SQS Docker image to Amazon ECR
      id: build-sqs-image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.SQS_ECR_REPOSITORY }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.SQS_ECR_REPOSITORY }}:latest
        platforms: linux/amd64

    - name: Download S3 task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.S3_TASK_DEF }} --query taskDefinition > s3-task-definition.json

    - name: Fill in the new image ID in the S3 ECS task definition
      id: s3-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: s3-task-definition.json
        container-name: ${{ env.S3_CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.S3_ECR_REPOSITORY }}:${{ github.sha }}

    - name: Deploy S3 ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.s3-task-def.outputs.task-definition }}
        service: ${{ env.S3_ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Download SQS task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.SQS_TASK_DEF }} --query taskDefinition > sqs-task-definition.json

    - name: Fill in the new image ID in the SQS ECS task definition
      id: sqs-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: sqs-task-definition.json
        container-name: ${{ env.SQS_CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.SQS_ECR_REPOSITORY }}:${{ github.sha }}

    - name: Deploy SQS ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.sqs-task-def.outputs.task-definition }}
        service: ${{ env.SQS_ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true